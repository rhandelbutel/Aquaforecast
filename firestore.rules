rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Use Firebase custom claims for admins OR user profile role.
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.role == 'admin' ||
        request.auth.token.admin == true  ||
        (
          // fallback to users/{uid}.role
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
        )
      );
    }

    function userDoesNotChangeAdminFields() {
      return isAdmin() ||
        (
          (!('status' in request.resource.data) || request.resource.data.status == resource.data.status) &&
          (!('role' in request.resource.data) || request.resource.data.role == resource.data.role) &&
          (!('approvedAt' in request.resource.data) || request.resource.data.approvedAt == resource.data.approvedAt) &&
          (!('approvedBy' in request.resource.data) || request.resource.data.approvedBy == resource.data.approvedBy) &&
          (!('rejectedAt' in request.resource.data) || request.resource.data.rejectedAt == resource.data.rejectedAt) &&
          (!('rejectedBy' in request.resource.data) || request.resource.data.rejectedBy == resource.data.rejectedBy) &&
          (!('studentId' in request.resource.data) || request.resource.data.studentId == resource.data.studentId)
        );
    }

    function canAccessPond(pondId) {
      let pond = get(/databases/$(database)/documents/ponds/$(pondId));
      return isSignedIn() && (
        isAdmin() ||
        (pond.data.userId == request.auth.uid) ||
        (pond.data.members != null && request.auth.uid in pond.data.members) ||
        (pond.data.collaborators != null && request.auth.uid in pond.data.collaborators)
      );
    }

    function isValidAlert(pondId) {
      return
        request.resource.data.pondId == pondId &&
        request.resource.data.type in ['warning','error','success','info'] &&
        request.resource.data.severity in ['low','medium','high'] &&
        request.resource.data.active is bool;
    }

    // ---------- USERS ----------
    match /users/{uid}/alertPrefs/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || isAdmin();
      allow update: if ((isOwner(userId) && userDoesNotChangeAdminFields()) || isAdmin());
    }

    // ---------- STUDENT ID RESERVATIONS ----------
    match /studentIds/{sid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/studentIds/$(sid));
      allow update, delete: if isSignedIn() && (
        isAdmin() ||
        resource.data.uid == request.auth.uid ||
        !( 'uid' in resource.data )
      );
    }

    // ---------- GROWTH SETUPS ----------
    match /growthSetups/{growthSetupId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // ---------- GROWTH HISTORY ----------
    match /growthHistory/{historyId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // ---------- FEEDING SCHEDULES (ADMIN-ONLY WRITES) ----------
    // Collection name matches your service: "feeding-schedules", doc id = pondId
    match /feeding-schedules/{pondId} {
      // Everyone signed in can read the schedule
      allow read: if isSignedIn();
      // Only admins can create/update/delete schedules
      allow create, update, delete: if isAdmin();
    }

    // ---------- PONDS ----------
    match /ponds/{pondId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      match /alerts/{alertId} {
        allow read: if canAccessPond(pondId);
        allow create, update: if canAccessPond(pondId) && isValidAlert(pondId);
        allow delete: if canAccessPond(pondId) && isAdmin();
      }
    }
  }
}
