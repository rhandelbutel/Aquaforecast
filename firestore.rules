rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Use Firebase custom claims for admins:
    // e.g. set via Admin SDK: auth.setCustomUserClaims(uid, { role: 'admin' })
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.role == 'admin' ||
        request.auth.token.admin == true
      );
    }

    // Ensure regular users cannot change admin-only fields on /users docs
    function userDoesNotChangeAdminFields() {
      return isAdmin() ||
        (
          (!('status' in request.resource.data) || request.resource.data.status == resource.data.status) &&
          (!('role' in request.resource.data) || request.resource.data.role == resource.data.role) &&
          (!('approvedAt' in request.resource.data) || request.resource.data.approvedAt == resource.data.approvedAt) &&
          (!('approvedBy' in request.resource.data) || request.resource.data.approvedBy == resource.data.approvedBy) &&
          (!('rejectedAt' in request.resource.data) || request.resource.data.rejectedAt == resource.data.rejectedAt) &&
          (!('rejectedBy' in request.resource.data) || request.resource.data.rejectedBy == resource.data.rejectedBy) &&
          (!('studentId' in request.resource.data) || request.resource.data.studentId == resource.data.studentId)
        );
    }

    // ðŸ”Ž Helper to check pond access using the parent doc
    function canAccessPond(pondId) {
      let pond = get(/databases/$(database)/documents/ponds/$(pondId));
      return isSignedIn() && (
        isAdmin() ||
        // owner
        (pond.data.userId == request.auth.uid) ||
        // OPTIONAL: if you store collaborators on the pond doc, uncomment whichever you use:
        (pond.data.members != null && request.auth.uid in pond.data.members) ||
        (pond.data.collaborators != null && request.auth.uid in pond.data.collaborators)
      );
    }

    // (Optional) minimal validation for alert writes
    function isValidAlert(pondId) {
      return
        request.resource.data.pondId == pondId &&
        request.resource.data.type in ['warning','error','success','info'] &&
        request.resource.data.severity in ['low','medium','high'] &&
        request.resource.data.active is bool;
        // Note: we intentionally don't strict-validate timestamps to allow serverTimestamp()
    }

    // ---------- USERS ----------
    match /users/{uid}/alertPrefs/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || isAdmin();
      allow update: if ((isOwner(userId) && userDoesNotChangeAdminFields()) || isAdmin());
    }

    // ---------- STUDENT ID RESERVATIONS ----------
    match /studentIds/{sid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/studentIds/$(sid));
      allow update, delete: if isSignedIn() && (
        isAdmin() ||
        resource.data.uid == request.auth.uid ||
        !( 'uid' in resource.data )
      );
    }

    // ---------- GROWTH SETUPS ----------
    match /growthSetups/{growthSetupId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // ---------- GROWTH HISTORY ----------
    match /growthHistory/{historyId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // ---------- PONDS ----------
    match /ponds/{pondId} {
      // Your existing rule (owner-only). Keep as-is unless you want members to read/write the pond doc itself.
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // âœ… NEW: POND ALERTS SUBCOLLECTION
      match /alerts/{alertId} {
        // Read/write alerts if caller can access the pond (owner/admin/optional members)
        allow read: if canAccessPond(pondId);
        allow create, update: if canAccessPond(pondId) && isValidAlert(pondId);
        // Optional: allow deletes (e.g., for admin tools)
        allow delete: if canAccessPond(pondId) && isAdmin();
      }
    }
  }
}
