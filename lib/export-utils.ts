// lib/export-utils.ts
"use client";

import { toPng } from "html-to-image";
import jsPDF from "jspdf";

export type ExportTarget = {
  id: string;
  title: string;
  label?: string;
};

type FooterInfo = {
  email?: string | null;
};

export async function captureById(id: string): Promise<string | null> {
  const el = document.getElementById(id);
  if (!el) return null;
  el.scrollIntoView({ block: "nearest" });
  await new Promise((r) => setTimeout(r, 50));
  try {
    const dataUrl = await toPng(el, {
      pixelRatio: 2,
      cacheBust: true,
      backgroundColor: "#ffffff",
      skipFonts: false,
    });
    return dataUrl;
  } catch (e) {
    console.error("captureById error", e);
    return null;
  }
}

// ---------- SINGLE-PAGE BUILDER (with header + footer) ----------
async function getImgSize(dataUrl: string): Promise<{ w: number; h: number }> {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => resolve({ w: img.naturalWidth || img.width, h: img.naturalHeight || img.height });
    img.src = dataUrl;
  });
}

export async function buildPdfSinglePageFromImages(opts: {
  images: Array<{ title: string; dataUrl: string }>;
  fileName: string;
  footer?: FooterInfo;
}) {
  const pdf = new jsPDF({ orientation: "p", unit: "pt", format: "a4" });
  const pageW = pdf.internal.pageSize.getWidth();
  const pageH = pdf.internal.pageSize.getHeight();

  const margin = 28;
  const headerH = 30; // increased to fit header
  const gutter = 8;

  const maxW = pageW - margin * 2;
  const maxH = pageH - margin * 2 - headerH - 20; // reserve space for footer

  // ðŸŸ¦ HEADER: AQUAFORECAST
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  pdf.setTextColor(25, 118, 210); // subtle blue accent
  pdf.text("AQUAFORECAST", pageW / 2, margin + 10, { align: "center" });

  // reset style for normal text
  pdf.setFontSize(12);
  pdf.setFont("helvetica", "normal");
  pdf.setTextColor(0);

  // measure image sizes
  const measured = await Promise.all(
    opts.images.map(async (img) => {
      const sz = await getImgSize(img.dataUrl);
      const ratio = sz.w / sz.h || 1.6;
      const targetH = maxW / ratio;
      return { ...img, ratio, baseW: maxW, baseH: targetH };
    })
  );

  const totalH = measured.reduce((sum, m, i) => sum + m.baseH + (i ? gutter : 0), 0);
  const scale = totalH > maxH ? maxH / totalH : 1;

  let y = margin + headerH;
  measured.forEach((m, i) => {
    const w = m.baseW * scale;
    const h = m.baseH * scale;
    const x = margin + (maxW - w) / 2;

    // optional small subtitle
    if (m.title) {
      pdf.setFontSize(10);
      pdf.setTextColor(90);
      pdf.text(m.title, margin, y - 4);
      pdf.setTextColor(0);
    }

    pdf.addImage(m.dataUrl, "PNG", x, y, w, h, undefined, "FAST");
    y += h + gutter;
  });

  // ðŸŸ« FOOTER: date + email
  const nowStr = new Date().toLocaleString("en-PH", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    hour12: true,
  });

  const who = opts.footer?.email ? ` â€¢ Generated by ${opts.footer.email}` : "";
  pdf.setFontSize(10);
  pdf.setTextColor(100);
  pdf.text(`Generated on ${nowStr}${who}`, margin, pageH - 20);
  pdf.setTextColor(0);

  pdf.save(opts.fileName);
}

// ---------- MULTI-PAGE BUILDER (optional, same style) ----------
export async function buildPdfFromImages(opts: {
  images: Array<{ title: string; dataUrl: string }>;
  fileName: string;
  footer?: FooterInfo;
}) {
  const pdf = new jsPDF({ orientation: "p", unit: "pt", format: "a4" });
  const pageW = pdf.internal.pageSize.getWidth();
  const pageH = pdf.internal.pageSize.getHeight();
  const margin = 28;
  const headerH = 30;

  const addHeader = () => {
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(25, 118, 210);
    pdf.text("AQUAFORECAST", pageW / 2, margin + 10, { align: "center" });
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(0);
  };

  const addFooter = () => {
    const nowStr = new Date().toLocaleString("en-PH", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });
    const who = opts.footer?.email ? ` â€¢ Generated by ${opts.footer.email}` : "";
    pdf.setFontSize(10);
    pdf.setTextColor(100);
    pdf.text(`Generated on ${nowStr}${who}`, margin, pageH - 20);
    pdf.setTextColor(0);
  };

  opts.images.forEach((img, i) => {
    if (i > 0) pdf.addPage();
    addHeader();

    const maxW = pageW - margin * 2;
    const maxH = pageH - margin * 2 - headerH;
    const imgRatio = 1.6;

    let w = maxW;
    let h = w / imgRatio;
    if (h > maxH) {
      h = maxH;
      w = h * imgRatio;
    }
    const x = margin + (maxW - w) / 2;
    const y = margin + headerH + 10;
    pdf.addImage(img.dataUrl, "PNG", x, y, w, h, undefined, "FAST");

    addFooter();
  });

  pdf.save(opts.fileName);
}

// ---------- UTILITIES ----------
export function makeDefaultTargets(): ExportTarget[] {
  return [
    { id: "export-pond-summary", title: "", label: "Pond Summary" },
    { id: "export-realtime", title: "", label: "Real-time Sensor Data" },
    { id: "export-harvest", title: "", label: "Harvest Prediction" },
    { id: "export-alerts", title: "", label: "System Alerts" },
  ];
}

export function niceNow() {
  const d = new Date();
  const pad = (n: number) => String(n).padStart(2, "0");
  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}_${pad(d.getHours())}-${pad(d.getMinutes())}`;
}
